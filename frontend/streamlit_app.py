# ===============================
# File: frontend/streamlit_app.py
# ===============================
import streamlit as st
import requests
import os

BACKEND = os.getenv("BACKEND_URL", "http://127.0.0.1:8000")

st.set_page_config(page_title="ContentCrafterAI", layout="wide")
st.title("ContentCrafterAI – Agentic Campaign UI")

with st.sidebar:
    st.header("Campaign Inputs")
    topic = st.text_input("Topic", value="ContentCrafterAI launch")
    audience = st.text_input("Audience", value="Infra engineers & data teams")
    if st.button("Generate Draft", use_container_width=True):
        with st.spinner("Generating draft (writer + designer)…"):
            r = requests.post(f"{BACKEND}/api/generate", json={"topic": topic, "audience": audience})
            if r.ok:
                st.session_state["result"] = r.json()
                st.success("Draft generated.")
            else:
                st.error(r.text)

result = st.session_state.get("result")

if result:
    draft = result.get("draft", {})
    draft_id = result.get("draft_id")

    col1, col2 = st.columns([3,2])
    with col1:
        st.subheader("✍️ Draft")
        st.write(f"**Platform:** {draft.get('platform','linkedin')}")
        st.text_area("Text", value=draft.get("text", ""), height=220)
        st.write("**Hashtags:**", ", ".join(draft.get("hashtags", [])))
        st.write("**CTA:**", draft.get("cta", ""))
        st.code(draft.get("image_brief", ""), language="markdown")

    with col2:
        st.subheader("🖼️ Image Preview")
        img_url = result.get("image_url")
        if img_url:
            st.image(img_url, caption="Generated by DALL·E")
        else:
            st.info("No image for this draft.")

    st.divider()
    publish_col, refresh_col = st.columns([1,1])
    with publish_col:
        if st.button("✅ Publish & Learn", type="primary"):
            with st.spinner("Publishing and writing feedback to MemGPT…"):
                r = requests.post(f"{BACKEND}/api/publish", json={"draft_id": draft_id})
                if r.ok:
                    st.session_state["published"] = r.json()
                    st.success("Published and logged engagement.")
                else:
                    st.error(r.text)
    with refresh_col:
        if st.button("🔄 Refresh Draft Data"):
            r = requests.get(f"{BACKEND}/api/draft/{draft_id}")
            if r.ok:
                st.session_state["result"] = r.json()
            else:
                st.error(r.text)

published = st.session_state.get("published")
if published:
    st.subheader("📊 Published Result")
    st.json(published)

st.caption("Set BACKEND_URL env var if your FastAPI runs elsewhere. Default http://127.0.0.1:8000")
